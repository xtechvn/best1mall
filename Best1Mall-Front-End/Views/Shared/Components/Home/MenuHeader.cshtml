@using Best1Mall_Front_End.Models;
@using Best1Mall_Front_End.Utilities;
@using Best1Mall_Front_End.Models.Products
@model List<CategoryModel>
@{
    ViewData["view_name"] = "MenuHeader_BestSeller"; // 👈 Chỉ định view riêng
}

@functions{
    string GetFullImageUrl(string avatar)
    {
        if (string.IsNullOrEmpty(avatar))
        {
            return "/assets/images/no-image.png"; // fallback ảnh mặc định
        }

        if (avatar.StartsWith("http") || avatar.StartsWith("data:image"))
        {
            return avatar; // Giữ nguyên nếu đã là URL hoặc base64
        }

        return "https://static-image.adavigo.com" + avatar; // Gắn domain tĩnh
    }
}
@if (Model != null)
{
    var firstId = Model.FirstOrDefault()?.id ?? 0;
   
        <!-- Menu bên trái -->
        <ul class="p-4 gap-2 md:w-1/4 w-full grid grid-cols-2 md:grid-cols-1" id="categoryMenu">
            @foreach (var item in Model)
            {
                var isFirst = item.id == firstId;
                <li>
                <a href="javascript:;" class="block py-2 hover:text-red-400 rounded menu-hover-item @(isFirst ? "first-active" : "")" data-id="@item.id">@item.name</a>
                </li>
            }

        </ul>
        <div class="category_id" data-categoryid="0" style="display:none;"></div>

        <!-- Menu con sẽ hiển thị ở đây -->
        <div id="categoryProducts" class="bg-white p-3 w-full md:rounded-lg">
            @* <div class="text-center text-gray-400">Di chuột vào danh mục để xem nhóm con...</div> *@
        
        </div>
  

    <!-- Hidden container để chứa sẵn các nhóm con -->
    <div id="categorySubData" class="hidden">
        @foreach (var item in Model)
        {
            if (item.group_product_child == null || !item.group_product_child.Any())
            {
                continue; // ❌ Bỏ qua luôn, không render gì cả
            }
            string imgSrc = GetFullImageUrl(item.image_path);
            <div class="sub-category-box" data-parent-id="@item.id">
               
                    
                        <div class="grid md:grid-cols-4 grid-cols-2 gap-3">
                            @foreach (var child in item.group_product_child)
                            {
                            <a href="/san-pham/@child.url_path?group_id=@child.id"
                                   class="flex gap-2 items-center rounded-md border border-gray-100 p-2">
                                    <div class="relative aspect-[1/1] w-15 overflow-hidden rounded-md">
                                    <img src="@GetFullImageUrl(child.image_path)"
                                             alt="@child.name"
                                             class="absolute inset-0 w-full h-full object-cover" />
                                    </div>
                                    <h4>@child.name</h4>
                                </a>
                            }
                        </div>

                        <div class="pt-3 mt-3 border-t border-gray-200">
                            <div class="flex justify-between flex-wrap gap-2 mb-3">
                                <h2 class="text-sky-900 font-medium uppercase">
                                    <a href="">Bán chạy</a>
                                </h2>
                              
                            </div>
                               @await Component.InvokeAsync("ProductList", new ProductListRequestModel
                               {
                                   group_id = item.id,
                                   page_index = 1,
                                   page_size = 6
                               })
                        </div>
                        
                        
                      
                 
                
               
            </div>
        }
        
    </div>

}


<script>
    document.addEventListener("DOMContentLoaded", function () {
        const menuItems = document.querySelectorAll(".menu-hover-item");
        const productBox = document.getElementById("categoryProducts");
        const isMobile = window.innerWidth <= 768;

        function showSubCategoryById(id) {
            const target = document.querySelector(`#categorySubData .sub-category-box[data-parent-id='${id}']`);
            if (target) {
                productBox.innerHTML = target.innerHTML;
                productBox.classList.remove("hidden");
            } else {
                productBox.innerHTML = "";
                productBox.classList.add("hidden");
            }
        }

        if (isMobile) {
            // Dưới mobile: CLICK để hiện danh mục
            menuItems.forEach(item => {
                item.addEventListener("click", function () {
                    const id = item.dataset.id;

                    // Bỏ active cũ
                    menuItems.forEach(i => i.classList.remove("text-purple-600", "font-semibold"));
                    item.classList.add("text-purple-600", "font-semibold");

                    showSubCategoryById(id);
                });
            });
        } else {
            // Trên PC: hover
            function handleHover(item) {
                const id = item.dataset.id;
                showSubCategoryById(id);

                // Highlight menu đang hover
                menuItems.forEach(i => i.classList.remove("text-purple-600", "font-semibold"));
                item.classList.add("text-purple-600", "font-semibold");
            }

            menuItems.forEach(item => {
                item.addEventListener("mouseenter", () => handleHover(item));
            });

            // Tự động hover vào phần tử đầu tiên
            const firstItem = document.querySelector(".menu-hover-item.first-active");
            if (firstItem) {
                setTimeout(() => handleHover(firstItem), 100);
            }
        }
    });
</script>
